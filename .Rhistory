library(FSA)
install.packages(c("lattice", "MASS", "Matrix", "mgcv", "rpart", "survival"))
install.packages("nnet")
install.package("metafor")
install.packages("metafor")
vignette("metafor")
install.package(Rcpp)
install.packages("Rcpp")
library(graphics)
a = 8 ; b = 4 ; c = 3 ; d = 12 ; K = 3;
plot(c(-5,16), c(-5,5), type="n", xlab="species x", ylab=" species y")
abline(h=0, v=0, col="gray60")
abline(v = -5:16, h = -5:5, col = "lightgray", lty=3)
#isocline of x
abline(b = -a/b/K, a = a/b , col = "red", lwd = 3)
text(6.5, 0.5, labels = "isocline of x")
#isocline of y
abline(v=d/c , col = "blue" , lwd = 3)
text(6.5, 0.5, labels = "isocline of y")
#isocline
abline(b = -a/b/K, a = a/b , col = "red", lwd = 3)
abline(v=d/c , col = "blue" , lwd = 3)
points(x = d/c, y = a*(1-d/c/K)/b, pch = 19 , col = "green" , cex = 1.5)
a = 8 ; b = 4 ; c = 3 ; d = 12 ; K = 3;
plot(c(-5,16), c(-5,5), type="n", xlab="species x", ylab=" species y")
abline(h=0, v=0, col="gray60")
abline(v = -5:16, h = -5:5, col = "lightgray", lty=3)
abline(b = -a/b/K, a = a/b , col = "red", lwd = 3)
text(6.5, 0.5, labels = "isocline of x")
abline(v=d/c , col = "blue" , lwd = 3)
text(6.5, 0.5, labels = "isocline of y")
points(x = d/c, y = a*(1-d/c/K)/b, pch = 19 , col = "green" , cex = 1.5)
# task 3: bifurcation diagram
R <- seq(1.8,3,length = 100)
N <- matrix(0,100,1000)
N[1:100,1] = 100
K <- 500
for(i in 1:100){
for(j in 1:999){
N[i,j+1] = N[i,j]+R[i]*N[i,j]*(1-N[i,j]/K)
}
}
matplot(R[1:100],N[1:100,900],type="p",pch=18,xlab="Intrinsic growth rate, r", ylab="Population size",main="Bifurcation Route to Chaos")
par(new=T)
for(i in 1:100){
for(j in 901:1000){
matplot(R[1:100],N[1:100,j],pch=18,type="p",axes=F,xlab="",ylab="")
par(new=T)
}
}
par(new=F)
# task 3: bifurcation diagram
# task 3: bifurcation diagram
R <- seq(1.8,3,length = 100)
N <- matrix(0,100,1000)
N[1:100,1] = 100
K <- 500
for(i in 1:100){
for(j in 1:999){
N[i,j+1] = N[i,j]+R[i]*N[i,j]*(1-N[i,j]/K)
}
}
matplot(R[1:100],N[1:100,900],type="p",pch=".",xlab="Intrinsic growth rate, r", ylab="Population size",main="Bifurcation Route to Chaos")
par(new=T)
for(i in 1:100){
for(j in 901:1000){
matplot(R[1:100],N[1:100,j],pch=".",type="p",axes=F,xlab="",ylab="")
par(new=T)
}
}
par(new=F)
matplot(R[1:100],N[1:100,900],type="p",pch=".",xlab="Intrinsic growth rate, r", ylab="Population size",main="Bifurcation Route to Chaos")
par(new=T)
for(i in 1:100){
for(j in 901:1000){
points(R[1:100],N[1:100,j],pch=".")
par(new=T)
}
}
par(new=F)
citation()
install.packages("ggplot2")
install.packages("devtools")
install.packages("dplyr")
install.packages("wordcloud")
install.packages("dplyr")
s=0:63
grains=2^s
tons=0.0648*sum(grains)/1e+06
cat("total weight is",tons,"tons \n")
#problem 3
years=tons/6.5e+08
cat("needs",years,"yeas to fill the board \n")
#problem 2
x=1:64
y=2^(x-1)
barplot(y,type="l",names.arg=x,xlab="square number",ylab="number of wheat grain")
?levelplot
?lapply
install.pacakges(rnoaa)
install.packages(rnoaa)
install.packages("rnoaa")
library(rnoaa)
vignettes(rnoaa)
erddap_vignettes(rnoaa)
erddap_table('erdCalCOFIshsiz')
library('devtools')
setwd('Work/Fishery/calcofi')
library(jsonlite)
output=fromjson('adj_space_quarter_data1951_2007.json')
output=fromJSON('adj_space_quarter_data1951_2007.json')
flatten(outout)
flatten(output)
output$sp
output$adj_sta_pos
output$crdata
output$crdata[,1]
output$crdata[1]
output=fromJSON('adj_space_quarter_data1951_2007.json')
output$sp
output$crdata
output$crdata[1]
test=output$crdata[1]
test=as.matrix(output$crdata[1])
test=as.matrix(as.numeric(output$crdata[1]))
test=as.matrix(as.numeric(unlist(output$crdata[1])))
output$crdata[1]
test <- matrix(unlist(output$crdata[1]),ncol=178,byrow=TRUE)
View(test)
test <- as.numeric(matrix(unlist(output$crdata[1]),ncol=178,byrow=TRUE))
test <- matrix(unlist(output$crdata[1]),ncol=178,byrow=TRUE)
class("test")<-numberic
class("test")<-numeric
unlist(output$crdata[1])
test <- matrix(as.numeric(unlist(output$crdata[1])),ncol=178,byrow=TRUE)
View(test)
output$adj_sta_pos
output$quarter_cruise_season
output$quarter_cruise_season[1]
length(output$quarter_cruise_season[1])
count(output$quarter_cruise_season[1])
