install.packages("MASS")
install.packages(c("Matrix", "foreign", "lattice", "mgcv", "nlme", "rpart", "survival"))
install.packages("MASS")
install.packages("dbi")
install.packages("DBI")
install.packages("RSQLite")
install.packages("deSolve")
Lorenz<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
# rate of change
dX <- a*X + Y*Z
dY <- b * (Y-Z)
dZ <- -X*Y + c*Y - Z
# return the rate of change
list(c(dX, dY, dZ))
})
}
library(deSolve)
parameters = c(a = -8/3, b = -10, c = 28)
state = c(X = 1, Y = 1, Z = 1)
out = ode(y = state, times = times, func = Lorenz, parms = parameters)
times <- seq(0, 100, by=0.01) #create a sequence of data with interval=0.1
out = ode(y = state, times = times, func = Lorenz, parms = parameters)
head(out)
Lorenz(times,state,parameters)
ax = 100
T = seq(0,tmax,1)
n = zeros(tmax)
tmax = 100
T = seq(0,tmax,1)
n = zeros(tmax)
n = vector(tmax)
tmax = 100
N[1] = 100
K=500
N = vector
N[1] = 100
N = vector(mode="numeric", length=tmax+1)
N[1] = 100
K=500
for (i in 1:tmax){
N[i+1]=N[i]+r*N[i]*(1-(N[i]/K))
}
tmax = 100
N = vector(mode="numeric", length=tmax+1)
N[1] = 100
K=500
r = 1.8
for (i in 1:tmax){
N[i+1]=N[i]+r*N[i]*(1-(N[i]/K))
}
N
plot(N[1:end-1],N[2:end])
N[,-1]
N[-1]
plot(N[,-1],N[2:tmax+1])
plot(N[-1],N[2:tmax+1])
plot(N[1:tmax],N[2:tmax+1])
length(N)
length(N[1:tmax])
length(N[2:tmax+1])
plot(N[1:tmax-1],N[2:tmax+1])
plot(0:100,N)
# Logistic map
# Crystal Tu 2014/11/19
tmax = 100
N = vector(mode="numeric", length=tmax+1)
N[1] = 100
K=500
r = 1.8
for (i in 1:tmax){
N[i+1]=N[i]+r*N[i]*(1-(N[i]/K))
}
plot(1:101,N)
plot(N)
N
plot(N,type = "l")
# Logistic map
# Crystal Tu 2014/11/19
tmax = 100
N = vector(mode="numeric", length=tmax+1)
N[1] = 101
K=500
r = 1.8
for (i in 1:tmax){
N[i+1]=N[i]+r*N[i]*(1-(N[i]/K))
}
plot(N,type = "l")
tmax = 100
N = vector(mode="numeric", length=tmax+1)
N[1] = 101
K=500
r = 1.8
for (i in 1:tmax){
N[i+1]=N[i]+r*N[i]*(1-(N[i]/K))
}
plot(N,type = "l")
# Logistic map
# Crystal Tu 2014/11/19
tmax = 100
N = vector(mode="numeric", length=tmax+1)
N[1] = 100
K=500
r = 2.8
for (i in 1:tmax){
N[i+1]=N[i]+r*N[i]*(1-(N[i]/K))
}
plot(N,type = "l")
N = matrix
N
N = matrix(0,ncol=length(r), nrow=tmax+1)
r = c(1.8,2.3,2.45,2,56,2.8)
N = matrix(0,ncol=length(r), nrow=tmax+1)
N[1,] = 100
tmax = 100
K=500
r = c(1.8,2.3,2.45,2,56,2.8)
N = matrix(0,ncol=length(r), nrow=tmax+1)
N[1,] = 100
for (j in 1:length(r)){
for (i in 1:tmax){
N[i+1,j]=N[i,j]+r[j]*N[i,j]*(1-(N[i,j]/K))
}
}
View(N)
tmax = 100
K=500
r = c(1.8,2.3,2.45,2,56,2.8)
N = matrix(0,ncol=length(r), nrow=tmax+1)
N[1,] = 100
for (j in 1:length(r)){
for (i in 1:tmax){
N[i+1,j]=N[i,j]+r[j]*N[i,j]*(1-(N[i,j]/K))
}
}
View(N)
View(N)
library(deSolve)
LVmod = function(Time, State, Pars) {
with(as.list(c(State, Pars)), {
dx = x*(1-x)-y*a1*x/(1+b1*x)
dy = y*a1*x/(1+b1*x)-z*a2*y/(1+b2*y)-d1*y
dz = z*a2*y/(1+b2*y)-d2*z
return(list(c(dx, dy, dz)))
})
}
pars = c(a1 = 5, b1 = 3.3, a2 = 0.1, b2 = 2, d1 = 0.4, d2 = 0.01)
yini = c(x=0.5,y=0.15,z=5)
times = seq(0, 100, by = 1)
out = as.data.frame(ode(func = LVmod, y = yini, parms = pars, times = times))
*#Oscillation, plot
matplot(out[,1], out[,2:4], type = "l", xlab = "time", ylab =
"Abundance",
main = "Lotka-Volterra", lwd = 2,col=c(4,2))
legend("topright", c("x", "y", "z"), col = c(4,2), lty = 1:2)
# 3D Scatterplot
library(scatterplot3d)
attach(mtcars)
scatterplot3d(wt,disp,mpg, main="3D Scatterplot")
# 3D Scatterplot with Coloring and Vertical Drop Lines
library(scatterplot3d)
attach(mtcars)
scatterplot3d(wt,disp,mpg, pch=16, highlight.3d=TRUE,
type="h", main="3D Scatterplot")
install.packages("scatterplot3d")
library(deSolve)
LVmod = function(Time, State, Pars) {
with(as.list(c(State, Pars)), {
dx = x*(1-x)-y*a1*x/(1+b1*x)
dy = y*a1*x/(1+b1*x)-z*a2*y/(1+b2*y)-d1*y
dz = z*a2*y/(1+b2*y)-d2*z
return(list(c(dx, dy, dz)))
})
}
pars = c(a1 = 5, b1 = 3.3, a2 = 0.1, b2 = 2, d1 = 0.4, d2 = 0.01)
yini = c(x=0.5,y=0.15,z=5)
times = seq(0, 100, by = 1)
out = as.data.frame(ode(func = LVmod, y = yini, parms = pars, times = times))
*#Oscillation, plot
matplot(out[,1], out[,2:4], type = "l", xlab = "time", ylab =
"Abundance",
main = "Lotka-Volterra", lwd = 2,col=c(4,2))
legend("topright", c("x", "y", "z"), col = c(4,2), lty = 1:2)
# 3D Scatterplot
library(scatterplot3d)
attach(mtcars)
scatterplot3d(wt,disp,mpg, main="3D Scatterplot")
# 3D Scatterplot with Coloring and Vertical Drop Lines
library(scatterplot3d)
attach(mtcars)
scatterplot3d(wt,disp,mpg, pch=16, highlight.3d=TRUE,
type="h", main="3D Scatterplot")
library(deSolve)
LVmod = function(Time, State, Pars) {
with(as.list(c(State, Pars)), {
dx = x*(1-x)-y*a1*x/(1+b1*x)
dy = y*a1*x/(1+b1*x)-z*a2*y/(1+b2*y)-d1*y
dz = z*a2*y/(1+b2*y)-d2*z
return(list(c(dx, dy, dz)))
})
}
pars = c(a1 = 5, b1 = 3.3, a2 = 0.1, b2 = 2, d1 = 0.4, d2 = 0.01)
yini = c(x=0.5,y=0.15,z=5)
times = seq(0, 100, by = 1)
out = as.data.frame(ode(func = LVmod, y = yini, parms = pars, times = times))
*#Oscillation, plot
matplot(out[,1], out[,2:4], type = "l", xlab = "time", ylab =
"Abundance",
main = "Lotka-Volterra", lwd = 2,col=c(4,2))
legend("topright", c("x", "y", "z"), col = c(4,2), lty = 1:2)
# 3D Scatterplot
library(scatterplot3d)
attach(mtcars)
scatterplot3d(wt,disp,mpg, main="3D Scatterplot")
# 3D Scatterplot with Coloring and Vertical Drop Lines
library(scatterplot3d)
attach(mtcars)
scatterplot3d(wt,disp,mpg, pch=16, highlight.3d=TRUE,
type="h", main="3D Scatterplot")
*#Oscillation, plot
matplot(out[,1], out[,2:4], type = "l", xlab = "time", ylab =
"Abundance",
main = "Lotka-Volterra", lwd = 2,col=c(4,2))
legend("topright", c("x", "y", "z"), col = c(4,2), lty = 1:2)
install.packages("DSP2014R", repos = "http://dspim.github.io/R", type = "source")
slide()
library(DSP2014R)
slide()
install.packages("deSolve")
library(deSolve)
f <- function(u,a,b) { a*u/(1+b*u) }
LVmod=function(Time, State, Pars){
with(as.list(c(State,Pars)),{
dx=x*(1-x)-y*f(x, a1, b1)
dy=y*f(x, a1, b1)-z*f(y, a2, b2)-d1*y
dz=z*f(y, a2, b2)-d2*z
return(list(c(dx,dy,dz)))
})
}
plot_func = function (out) {
matplot(out[,1], out[,-1], type="l", xlab="Time",ylab="")
legend(800,5,title="Time series (burn-in) of Trial#1",col=c(1,2,3),lty=c(1,2,3),
legend=c("x","y","z"),bty="n",cex=0.8)
matplot(out[1:400,1], out[1:400,-1], type="l", xlab="Time",ylab="")
legend(250,5,title="Time series (burn-in) of Trial#1",col=c(1,2,3),lty=c(1,2,3),
legend=c("x","y","z"),bty="n",cex=0.8)
}
pars = c(a1=5, b1=3.3, a2=0.1, b2=2, d1=0.4, d2=0.01)
yini = c(x = 0.5, y = 0.15, z=5)
out1 = as.data.frame(ode(func = LVmod, y = yini,
parms = pars,
times = times, method="ode45"))
plot_func(out1)
out2 = as.data.frame(ode(func = LVmod, y = c(x=0.5, y=0.15, z=2.5),
parms = pars,
times = times, method="ode45"))
plot_func(out2)
pars = c(a1=5, b1=3.3, a2=0.1, b2=2, d1=0.4, d2=0.01)
yini = c(x = 0.5, y = 0.15, z=5)
out1 = as.data.frame(ode(func = LVmod, y = yini,
parms = pars,
times = times, method="ode45"))
plot_func(out1)
out1 = as.data.frame(ode(func = LVmod, y = yini,
parms = pars,
times = times, method="ode45"))
# Solve Lokta-Volterra equation using RK4 method
# Crystal 20141112
library(deSolve)
LVmod = function(Time, State, Pars) {
with(as.list(c(State, Pars)),{
dPrey = r*Prey-a*Prey*Predator
dPredator = -d*Predator + b*a*Prey*Predator
return(list(c(dPrey, dPredator)))
})
}
pars = c(a=0.01, r=0.5, d=0.1, b=0.02)
yini = c(Prey=200, Predator=20)
times = seq(0,100,1)
out = as.data.frame(ode(func=LVmod, y=yini, parms=pars, times=times))
#Oscillation plot
matplot(out[,1], out[,2:3], type= "l", xlab="time", ylab="Abundance", main="Lokta-Volterra", lwd=2, col=c(4,2))
legend("topright",c("prey","predator",col=c(4,2),lty=1:2))
library(deSolve)
? ode
f <- function(u,a,b) { a*u/(1+b*u) }
LVmod=function(Time, State, Pars){
with(as.list(c(State,Pars)),{
dx=x*(1-x)-y*f(x, a1, b1)
dy=y*f(x, a1, b1)-z*f(y, a2, b2)-d1*y
dz=z*f(y, a2, b2)-d2*z
return(list(c(dx,dy,dz)))
})
}
plot_func = function (out) {
matplot(out[,1], out[,-1], type="l", xlab="Time",ylab="")
legend(800,5,title="Time series (burn-in) of Trial#1",col=c(1,2,3),lty=c(1,2,3),
legend=c("x","y","z"),bty="n",cex=0.8)
matplot(out[1:400,1], out[1:400,-1], type="l", xlab="Time",ylab="")
legend(250,5,title="Time series (burn-in) of Trial#1",col=c(1,2,3),lty=c(1,2,3),
legend=c("x","y","z"),bty="n",cex=0.8)
}
pars = c(a1=5, b1=3.3, a2=0.1, b2=2, d1=0.4, d2=0.01)
yini = c(x = 0.5, y = 0.15, z=5)
out1 = as.data.frame(ode(func = LVmod, y = yini,
parms = pars,
times = times, method="ode45"))
plot_func(out1)
out2 = as.data.frame(ode(func = LVmod, y = c(x=0.5, y=0.15, z=2.5),
parms = pars,
times = times, method="ode45"))
plot_func(out2)
?matplot
install.packages("wordcloud")
?fig
??fig
install.packages("MASS")
data(boston,package="MASS")
data(Boston,package="MASS")
str(Boston)
?Boston
View(Boston)
data(iris)
rm(boston)
rm(Boston)
str(iris)
?factor
summary(iris)
?summarise
library(dplyr)
setosa <- filter(iris, Species = "setosa")
?filter
library(dplyr)
setosa <- filter(iris, Species = "setosa")
installed.packages()
installed.packages(dplyr)
installed.packages("dplyr")
installed.packages("yaml")
library("yaml")
install.pakcages(Rcpp)
install.pakcage(Rcpp)
install.packages("Rcpp")
install.packages("Rcpp")
library(devtools)
install_github("ha0ye/rEDM")
library(devtool)
library(devtools)
install_github("ha0ye/rEDM")
library(devtools)
install_github("ha0ye/rEDM")
sessionInfo()
install.packages("Rcpp", type="source")
install_github("ha0ye/rEDM")
library(rEDM)
library(rEDM)
library(devtools)
install_github(“ha0ye/rEDM”)
install_github("ha0ye/rEDM")
sardine_anchovy_sst
paramecium_didinium
detach("package:rEDM", unload=TRUE)
library("rEDM", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
s_map
library(rEDM)
paramecium_didinium
data(paramecium_didinium)
time_series <- data(paramecium_didinium)
s_map(time_series, lib = c(1, NROW(time_series)), pred = c(1,
NROW(time_series)), norm_type = c("L2 norm", "L1 norm"), E = 1:10,
tau = 1, tp = 1, num_neighbors = 0, theta = c(0, 1e-04, 3e-04, 0.001,
0.003, 0.01, 0.03, 0.1, 0.3, 0.5, 0.75, 1, 1.5, 2, 3, 4, 6, 8),
stats_only = TRUE, exclusion_radius = NULL, epsilon = NULL,
silent = FALSE, save_smap_coefficients = TRUE)
s_map(paramecium_didinium, lib = c(1, NROW(time_series)), pred = c(1,
NROW(time_series)), norm_type = c("L2 norm", "L1 norm"), E = 1:10,
tau = 1, tp = 1, num_neighbors = 0, theta = c(0, 1e-04, 3e-04, 0.001,
0.003, 0.01, 0.03, 0.1, 0.3, 0.5, 0.75, 1, 1.5, 2, 3, 4, 6, 8),
stats_only = TRUE, exclusion_radius = NULL, epsilon = NULL,
silent = FALSE, save_smap_coefficients = TRUE)
out <- s_map(paramecium_didinium, lib = c(1, NROW(time_series)), pred = c(1,
NROW(time_series)), norm_type = c("L2 norm", "L1 norm"), E = 1:10,
tau = 1, tp = 1, num_neighbors = 0, theta = c(0, 1e-04, 3e-04, 0.001,
0.003, 0.01, 0.03, 0.1, 0.3, 0.5, 0.75, 1, 1.5, 2, 3, 4, 6, 8),
stats_only = TRUE, exclusion_radius = NULL, epsilon = NULL,
silent = FALSE, save_smap_coefficients = TRUE)
install.packages("dendextend")
setwd("work/Fishery/calcofi")
library(jsonlite)
output=fromJSON('adj_space_quarter_data1951_2007.json')
output$quarter_cruise_season[1]
output$sp[1]
output$adj_sta_pos
output$quarter_cruise_season[1]
test <- matrix(as.numeric(unlist(output$crdata[1])),ncol=178,byrow=TRUE)
View(test)
output$crdata[1]
test <- matrix(as.numeric(unlist(output$crdata[1])),ncol=178,byrow=TRUE)
test <- output$crdata[1]
test <- unlist(output$crdata[1])
library(reshape2)
install.packages("earlywarnings")
install.packages(RCurl)
install.packages("RCurl")
require(RCurl)
sha <- getURL("https://docs.google.com/spreadsheets/d/1Ft1B6Vt-ned2oM9X0cv5rvRuS2vq92LbBmMumsiDlxM/pub?output=csv")
SHAdata <- read.csv(textConnection(sha))
View(SHAdata)
require(RCurl)
sha <- getURL("https://docs.google.com/spreadsheets/d/1Ft1B6Vt-ned2oM9X0cv5rvRuS2vq92LbBmMumsiDlxM/pub?output=csv")
SHAdata <- read.csv(textConnection(sha))
View(SHAdata)
View(SHAdata)
rm(SHAdata)
sha <- getURL("https://docs.google.com/spreadsheets/d/1Ft1B6Vt-ned2oM9X0cv5rvRuS2vq92LbBmMumsiDlxM/pub?output=csv")
SHAdata <- read.csv(textConnection(sha))
View(SHAdata)
plot(SHAdata$close)
rm(SHAdata)
sha <- getURL("https://docs.google.com/spreadsheets/d/1Ft1B6Vt-ned2oM9X0cv5rvRuS2vq92LbBmMumsiDlxM/pub?output=csv")
SHAdata <- read.csv(textConnection(sha))
View(SHAdata)
plot(SHAdata$close)
View(SHAdata)
plot(SHAdata)
plot(SHAdata,lty=1)
?plot
plot(SHAdata,type="l")
plot(SHAdata,type="l")
plot(SHAdata,type=l)
plot(SHAdata,type="l")
p <- ggplot(SHAdata, aes(x=Date,y=Close))
p + geom_line()
library(ggplot2)
p <- ggplot(SHAdata, aes(x=Date,y=Close))
p + geom_line()
p <- ggplot(SHAdata)
p + geom_line()
p <- ggplot(SHAdata,aes(x=Date,y=Close,group=NULL))
p + geom_line()
?qplot
p <- qplot(Date,Close,data=SHAdata)
qplot(Date,Close,data=SHAdata)
qplot(Date,Close,data=SHAdata,geom="line")
plot(SHAdata$close)
plot(SHAdata$close,xlim = c(1,126))
install.packages("rerddap")
qplot(Date,Close,data=SHAdata)
?DATE
?date
SHAdata$Date <- as.Date(SHAdata$Date,"%y/%m/%d")
View(SHAdata)
sha <- getURL("https://docs.google.com/spreadsheets/d/1Ft1B6Vt-ned2oM9X0cv5rvRuS2vq92LbBmMumsiDlxM/pub?output=csv")
SHAdata <- read.csv(textConnection(sha))
mode(SHAdata)
SHAdata <- unlist(read.csv(textConnection(sha)))
SHAdata
SHAdata <- as.data.frame(read.csv(textConnection(sha)))
mode(SHAdata)
SHAdata <- read.csv(textConnection(sha))
newdates <- as.Date(SHAdata$Date,"%Y/%m/%d")
newdates
SHAdata$Date <- as.Date(SHAdata$Date,"%Y/%m/%d")
qplot(Date,Close,data=SHAdata)
qplot(Date,Close,data=SHAdata,geom="line")
generic_ews(SHAdata$Close,winsize=40,detrending="first-differencing")
library(earlywarnings)
generic_ews(SHAdata$Close,winsize=40,detrending="first-differencing")
generic_ews(SHAdata$Close,winsize=40,detrending="first-diff")
generic_ews(SHAdata$Close,detrending="first-diff")
generic_ews(SHAdata$Close)
generic_ews(SHAdata$Close,detrending="first-diff")
bds<-bds_ews(SHAdata$Close)
bds<-bdstest_ews(SHAdata$Close)
ews<-generic_ews(SHAdata$Close,detrending="first-diff")
ews<-generic_ews(SHAdata$Close,detrending="first-diff",logtransform=TRUE)
ews<-generic_ews(SHAdata$Close,detrending="first-diff",logtransform=TRUE)
ews<-generic_ews(SHAdata$Close[1:80],detrending="first-diff",logtransform=TRUE)
ews<-generic_ews(SHAdata$Close[1:90],detrending="first-diff",logtransform=TRUE)
ews<-generic_ews(SHAdata$Close[1:100],detrending="first-diff",logtransform=TRUE)
ews<-generic_ews(SHAdata$Close[1:110],detrending="first-diff",logtransform=TRUE)
ews<-generic_ews(SHAdata$Close[1:120],detrending="first-diff",logtransform=TRUE)
ews<-generic_ews(SHAdata$Close[1:115],detrending="first-diff",logtransform=TRUE)
ews<-generic_ews(SHAdata$Close[20:115],detrending="first-diff",logtransform=TRUE)
ews<-generic_ews(SHAdata$Close[50:115],detrending="first-diff",logtransform=TRUE)
View(SHAdata)
ews<-generic_ews(SHAdata$Close[58:115],detrending="first-diff",logtransform=TRUE)
ews<-generic_ews(SHAdata$Close[50:126],detrending="first-diff",logtransform=TRUE)
ews<-generic_ews(SHAdata$Close,detrending="first-diff",logtransform=TRUE)
ews<-generic_ews(SHAdata$Close[58:100],detrending="first-diff",logtransform=TRUE)
ews<-generic_ews(SHAdata$Close[58:105],detrending="first-diff",logtransform=TRUE)
ews<-generic_ews(SHAdata$Close[58:126],detrending="first-diff",logtransform=TRUE)
ews<-generic_ews(SHAdata$Close[58:100],detrending="first-diff",logtransform=TRUE)
ews<-generic_ews(SHAdata$Close[58:101],detrending="first-diff",logtransform=TRUE)
ews<-generic_ews(SHAdata$Close[58:105],detrending="first-diff",logtransform=TRUE)
ews<-generic_ews(SHAdata$Close[58:110],detrending="first-diff",logtransform=TRUE)
ews<-generic_ews(SHAdata$Close,detrending="first-diff",logtransform=TRUE)
sens <- sensitivity_ews(SHAdata$Close,indicator=c("ar1","sd","cv"),winsizerange=c(15,60),detrending="first-diff",logtransform = TRUE)
sens <- sensitivity_ews(SHAdata$Close,indicator="ar1",winsizerange=c(15,60),detrending="first-diff",logtransform = TRUE)
ews <- generic_ews(SHAdata$Close,detrending="first-diff",logtransform=TRUE)
